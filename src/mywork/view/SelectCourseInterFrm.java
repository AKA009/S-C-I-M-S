/*
 * SelectCourseInterFrm.java
 *
 * Created on __DATE__, __TIME__
 */

package mywork.view;

import java.sql.Connection;
import java.sql.ResultSet;
import java.util.Vector;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import mywork.dao.CourseDao;
import mywork.dao.SelectionDao;
import mywork.model.Course;
import mywork.model.Selection;
import mywork.util.DbUtil;


/**
 *
 * @author  __USER__
 */
public class SelectCourseInterFrm extends javax.swing.JInternalFrame {
	DbUtil dbUtil = new DbUtil();
	CourseDao courseDao = new CourseDao();
	SelectionDao selectionDao = new SelectionDao();
	private int capacity;
	private int numSelected;
	private int courseId=-1;

	/** Creates new form SelectCourseInterFrm */
	public SelectCourseInterFrm() {
		initComponents();
		this.setLocation(200, 50);
		this.fillTable(new Course());

	}

	private void fillTable(Course course) {
		DefaultTableModel dtm = (DefaultTableModel) courseTable.getModel();
		dtm.setRowCount(0);
		Connection con = null;
		try {
			con = dbUtil.getCon();
			ResultSet rs = courseDao.courseList(con, course);
			while (rs.next()) {
				Vector v = new Vector();
				v.add(rs.getString("courseId"));
				v.add(rs.getString("courseName"));
				v.add(rs.getString("courseTime"));
				v.add(rs.getString("courseTeacher"));
				v.add(rs.getString("capacity"));
				v.add(rs.getString("numSelected"));
				dtm.addRow(v);

			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			try {
				dbUtil.closeCon(con);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        courseTable = new javax.swing.JTable();
        jb_underFull = new javax.swing.JButton();
        jb_confirm = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setTitle("课程选择");

        courseTable.setFont(new java.awt.Font("仿宋", 0, 12)); // NOI18N
        courseTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "课程编号", "课程名称", "上课时间", "任课老师", "课程容量", "已选人数"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        courseTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                courseTableMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(courseTable);

        jb_underFull.setText("只显示未选满课程");
        jb_underFull.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_underFullActionPerformed(evt);
            }
        });

        jb_confirm.setText("确认选课");
        jb_confirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_confirmActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 578, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(134, 134, 134)
                        .addComponent(jb_underFull)
                        .addGap(98, 98, 98)
                        .addComponent(jb_confirm)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jb_underFull)
                    .addComponent(jb_confirm))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void jb_underFullActionPerformed(java.awt.event.ActionEvent evt) {
		DefaultTableModel dtm = (DefaultTableModel) courseTable.getModel();
		dtm.setRowCount(0);
		Connection con = null;
		Course course=new Course();
		try {
			con = dbUtil.getCon();
			ResultSet rs = courseDao.UnderFullList(con, course);
			while (rs.next()) {
				Vector v = new Vector();
				v.add(rs.getString("courseId"));
				v.add(rs.getString("courseName"));
				v.add(rs.getString("courseTime"));
				v.add(rs.getString("courseTeacher"));
				v.add(rs.getString("capacity"));
				v.add(rs.getString("numSelected"));
				dtm.addRow(v);

			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			try {
				dbUtil.closeCon(con);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	private void courseTableMousePressed(java.awt.event.MouseEvent evt) {
		int row = courseTable.getSelectedRow();

		courseId = Integer.parseInt((String) courseTable.getValueAt(row, 0));
		capacity = Integer.parseInt((String) courseTable.getValueAt(row, 4));
		numSelected = Integer.parseInt((String) courseTable.getValueAt(row, 5));

	}

	private void jb_confirmActionPerformed(java.awt.event.ActionEvent evt) {
		if (courseId==-1) {
			JOptionPane.showMessageDialog(this, "请选择一门课程！");
			return;
		}
		if (capacity == numSelected) {
			JOptionPane.showMessageDialog(this, "该课程已选满,请选择其他课程.");
			return;
		}

		int n = JOptionPane.showConfirmDialog(this, "确定要选择该门课程吗?");
		if (n == 0) {
			Connection con = null;
			int currentSno = LogOnFrm.currentStudent.getSno();
			Selection selection = new Selection(courseId, currentSno);
			try {
				con = dbUtil.getCon();
				int selectionNum = selectionDao.SelectionAdd(con, selection);
				int selectedNum = selectionDao.NumSelectedAdd(con, courseId);
				if (selectionNum == 1 && selectedNum == 1) {
					JOptionPane.showMessageDialog(this, "选课成功!");
					this.fillTable(new Course());
				} else {
					JOptionPane.showMessageDialog(this, "选课失败!");
				}
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				JOptionPane.showMessageDialog(this, "已选过该门课程!");
			} finally {
				try {
					dbUtil.closeCon(con);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}

	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable courseTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jb_confirm;
    private javax.swing.JButton jb_underFull;
    // End of variables declaration//GEN-END:variables

}